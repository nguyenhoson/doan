import random
def generate_initial_solution(customers, depot, capacity_constraints, time_window_constraint):
    customer_list = [i for i in customers if i != depot]
    solution = []
    current_load = 0
    current_time = 0
    route = [depot]
    route_capacity = random.choice(capacity_constraints)  # Trọng tải tối đa cho mỗi chuyến xe
    route_time = 0
    while customer_list:
        customer = random.choice(customer_list)
        demand_customer = demand[customer]
        total_load = current_load + demand_customer[0]  # Yêu cầu về khối lượng
        travel_time_to_customer = travel_time[route[-1]][customer]
        total_time = current_time + travel_time_to_customer + demand_customer[1]
# chỗ này total_time saiii
        if total_load <= route_capacity and time_window_constraint[customer][0] <= total_time <= time_window_constraint[customer][1]:
            route.append(customer)
            current_load = total_load
            current_time = total_time
            customer_list.remove(customer)
            if len(customer_list)==1:
                solution.append(route)   
        else:
            #print(current_load)
            # Kết thúc chuyến xe hiện tại
            solution.append(route)
            #print(f"Total Load of Current Route: {current_load}")  # In total_load của chuyến xe
            
            route = [depot]
            route.append(customer)
            current_load = demand_customer[0]
            current_time = travel_time_to_customer + demand_customer[1]
            customer_list.remove(customer)
            #print(customer_list)
    return solution
c = [0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
customers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
depot = 0
capacity_constraint = [100]
time_window_constraint = {i: (0, 400) for i in range(31)}
demand = {0: (0, 0), 1: (10, 5), 2: (20, 5), 3: (30, 5), 4: (40, 5), 5: (30, 5), 6: (20, 5), 7: (30, 5), 8: (35, 5), 9: (25, 5), 10: (10, 5), 11: (10, 5), 12: (10, 5), 13: (10, 5), 14: (10, 5), 15: (10, 5), 16: (10, 5), 17: (10, 5), 18: (10, 5), 19: (10, 5), 20: (10, 5), 21: (10, 5), 22: (10, 5), 23: (10, 5), 24: (10, 5), 25: (10, 5), 26: (10, 5), 27: (10, 5), 28: (10, 5), 29: (10, 5), 30: (10, 5)}
total_demand = sum(demand[i][0] for i in demand)
Kmin = total_demand // capacity_constraint[0] + 1
travel_time = {
    0: {1: 17, 2: 10, 3: 20, 4: 32, 5: 29, 6: 30, 7: 46, 8: 46, 9: 22, 10: 39, 11: 12, 12: 22, 13: 10, 14: 33, 15: 29, 16: 31, 17: 33, 18: 26, 19: 30, 20: 36, 21: 27, 22: 19, 23: 49, 24: 16, 25: 43, 26: 20, 27: 44, 28: 20, 29: 25, 30: 32},
    1: {0: 17, 2: 48, 3: 50, 4: 13, 5: 44, 6: 42, 7: 44, 8: 44, 9: 10, 10: 11, 11: 40, 12: 11, 13: 42, 14: 31, 15: 31, 16: 26, 17: 34, 18: 19, 19: 10, 20: 27, 21: 36, 22: 28, 23: 23, 24: 15, 25: 10, 26: 22, 27: 22, 28: 21, 29: 22, 30: 23},
    2: {0: 10, 1: 48, 3: 11, 4: 48, 5: 32, 6: 28, 7: 40, 8: 40, 9: 32, 10: 42, 11: 21, 12: 46, 13: 48, 14: 29, 15: 48, 16: 19, 17: 18, 18: 35, 19: 47, 20: 39, 21: 28, 22: 26, 23: 32, 24: 14, 25: 45, 26: 19, 27: 36, 28: 11, 29: 22, 30: 48},
    3: {0: 20, 1: 50, 2: 11, 4: 30, 5: 36, 6: 43, 7: 10, 8: 37, 9: 29, 10: 34, 11: 43, 12: 31, 13: 12, 14: 30, 15: 46, 16: 18, 17: 15, 18: 17, 19: 34, 20: 18, 21: 28, 22: 17, 23: 46, 24: 10, 25: 14, 26: 49, 27: 39, 28: 31, 29: 13, 30: 15},
    4: {0: 32, 1: 13, 2: 48, 3: 30, 5: 32, 6: 37, 7: 11, 8: 26, 9: 27, 10: 34, 11: 29, 12: 20, 13: 15, 14: 21, 15: 29, 16: 42, 17: 18, 18: 45, 19: 18, 20: 27, 21: 40, 22: 24, 23: 20, 24: 45, 25: 40, 26: 37, 27: 47, 28: 34, 29: 11, 30: 42},
    5: {0: 29, 1: 44, 2: 32, 3: 36, 4: 32, 6: 28, 7: 44, 8: 48, 9: 43, 10: 11, 11: 26, 12: 19, 13: 15, 14: 42, 15: 29, 16: 26, 17: 21, 18: 24, 19: 26, 20: 29, 21: 48, 22: 10, 23: 40, 24: 22, 25: 33, 26: 44, 27: 47, 28: 41, 29: 18, 30: 15},
    6: {0: 30, 1: 42, 2: 28, 3: 43, 4: 37, 5: 28, 7: 28, 8: 36, 9: 16, 10: 38, 11: 34, 12: 11, 13: 25, 14: 21, 15: 12, 16: 45, 17: 44, 18: 33, 19: 19, 20: 19, 21: 32, 22: 13, 23: 33, 24: 33, 25: 41, 26: 39, 27: 13, 28: 38, 29: 17, 30: 21},
    7: {0: 46, 1: 44, 2: 40, 3: 10, 4: 11, 5: 44, 6: 28, 8: 28, 9: 22, 10: 35, 11: 19, 12: 33, 13: 21, 14: 37, 15: 42, 16: 28, 17: 45, 18: 45, 19: 34, 20: 12, 21: 29, 22: 46, 23: 40, 24: 46, 25: 16, 26: 19, 27: 18, 29: 45, 30: 14},
    8: {0: 46, 1: 44, 2: 40, 3: 37, 4: 26, 5: 48, 6: 36, 7: 28, 9: 21, 10: 15, 11: 21, 12: 40, 13: 41, 14: 16, 15: 20, 16: 22, 17: 23, 18: 40, 19: 21, 20: 47, 21: 28, 22: 20, 23: 21, 24: 31, 25: 29, 26: 44, 27: 45, 29: 46, 30: 22},
    9: {0: 22, 1: 10, 2: 32, 3: 29, 4: 27, 5: 43, 6: 16, 7: 22, 8: 21, 10: 10, 11: 20, 12: 29, 13: 24, 14: 37, 15: 41, 16: 39, 17: 33, 18: 11, 19: 45, 20: 15, 21: 17, 22: 47, 23: 46, 24: 36, 25: 39, 26: 48, 27: 29, 28: 42, 30: 50},
    10: {0: 39, 1: 11, 2: 42, 3: 34, 4: 34, 5: 11, 6: 38, 7: 35, 8: 15, 9: 10, 11: 47, 12: 14, 13: 33, 14: 39, 15: 40, 16: 35, 17: 39, 18: 29, 19: 11, 20: 11, 21: 44, 22: 40, 23: 47, 24: 15, 25: 40, 26: 11, 27: 43, 28: 13, 29: 20, 30: 31},
    11: {0: 12, 1: 40, 2: 21, 3: 43, 4: 29, 5: 26, 6: 34, 7: 19, 8: 21, 9: 20, 10: 47, 12: 14, 13: 14, 14: 33, 15: 43, 16: 23, 17: 14, 18: 35, 19: 33, 20: 17, 21: 32, 22: 49, 23: 23, 24: 46, 25: 49, 26: 23, 27: 11, 28: 44, 29: 36, 30: 36},
    12: {0: 22, 1: 11, 2: 46, 3: 31, 4: 20, 5: 19, 6: 11, 7: 33, 8: 40, 9: 29, 10: 14, 11: 14, 13: 26, 14: 11, 15: 43, 16: 28, 17: 41, 18: 42, 19: 37, 20: 41, 21: 40, 22: 23, 23: 20, 24: 14, 25: 38, 26: 26, 27: 33, 28: 44, 29: 38, 30: 44},
    13: {0: 10, 1: 42, 2: 48, 3: 12, 4: 15, 5: 15, 6: 25, 7: 21, 8: 34, 9: 24, 10: 13, 11: 48, 12: 26, 14: 39, 15: 30, 16: 35, 17: 36, 18: 28, 19: 36, 20: 21, 21: 25, 22: 12, 23: 43, 24: 29, 25: 32, 26: 37, 27: 37, 28: 30, 29: 10, 30: 33},
    14: {0: 33, 1: 31, 2: 29, 3: 30, 4: 21, 5: 42, 6: 21, 7: 37, 8: 16, 9: 37, 10: 39, 11: 33, 12: 11, 13: 39, 15: 34, 16: 36, 17: 16, 18: 29, 19: 24, 20: 40, 21: 38, 22: 39, 23: 46, 24: 31, 25: 13, 26: 16, 27: 45, 28: 27, 29: 30, 30: 32},
    15: {0: 29, 1: 31, 2: 48, 3: 46, 4: 29, 5: 29, 6: 12, 7: 42, 8: 20, 9: 41, 10: 40, 11: 43, 12: 43, 13: 30, 14: 34, 16: 36, 17: 37, 18: 18, 19: 18, 20: 16, 21: 33, 22: 33, 23: 48, 24: 12, 25: 13, 26: 23, 27: 46, 28: 48, 29: 28, 30: 34},
    16: {0: 31, 1: 26, 2: 19, 3: 18, 4: 42, 5: 26, 6: 45, 7: 28, 8: 22, 9: 39, 10: 35, 11: 23, 12: 28, 13: 35, 14: 36, 15: 36, 17: 10, 18: 30, 19: 44, 20: 11, 21: 47, 22: 30, 23: 33, 24: 15, 25: 12, 26: 47, 27: 46, 28: 33, 29: 21, 30: 17},
    17: {0: 33, 1: 34, 2: 18, 3: 15, 4: 18, 5: 21, 6: 44, 7: 45, 8: 23, 9: 33, 10: 39, 11: 14, 12: 41, 13: 36, 14: 16, 15: 37, 16: 10, 18: 20, 19: 46, 20: 30, 21: 35, 22: 36, 23: 48, 24: 48, 25: 13, 26: 29, 27: 39, 28: 46, 29: 38, 30: 49},
    18: {0: 26, 1: 19, 2: 35, 3: 17, 4: 45, 5: 24, 6: 33, 7: 45, 8: 40, 9: 11, 10: 29, 11: 35, 12: 42, 13: 28, 14: 29, 15: 18, 16: 30, 17: 20, 19: 11, 20: 29, 21: 41, 22: 31, 23: 31, 24: 40, 25: 38, 26: 10, 27: 17, 28: 31, 29: 15, 30: 29},
    19: {0: 30, 1: 10, 2: 47, 3: 34, 4: 18, 5: 26, 6: 19, 7: 34, 8: 21, 9: 45, 10: 11, 11: 33, 12: 37, 13: 36, 14: 24, 15: 18, 16: 44, 17: 46, 18: 11, 20: 16, 21: 29, 22: 41, 23: 49, 24: 42, 25: 23, 26: 29, 27: 33, 28: 29, 29: 22, 30: 16},
    20: {0: 36, 1: 27, 2: 39, 3: 18, 4: 27, 5: 29, 6: 19, 7: 12, 8: 47, 9: 15, 10: 11, 11: 17, 12: 41, 13: 21, 14: 40, 15: 16, 16: 11, 17: 30, 18: 29, 19: 16, 21: 11, 22: 11, 23: 14, 24: 27, 25: 28, 26: 16, 27: 19, 28: 25, 29: 28, 30: 38},
    21: {0: 27, 1: 36, 2: 28, 3: 28, 4: 40, 5: 48, 6: 32, 7: 29, 8: 28, 9: 17, 10: 44, 11: 32, 12: 40, 13: 25, 14: 38, 15: 33, 16: 47, 17: 35, 18: 41, 19: 29, 20: 11, 22: 48, 23: 36, 24: 40, 25: 10, 26: 10, 27: 10, 28: 30, 29: 49, 30: 10},
    22: {0: 19, 1: 28, 2: 26, 3: 17, 4: 24, 5: 10, 6: 13, 7: 46, 8: 20, 9: 47, 10: 40, 11: 49, 12: 23, 13: 12, 14: 39, 15: 33, 16: 30, 17: 36, 18: 31, 19: 41, 20: 11, 21: 48, 23: 16, 24: 49, 25: 22, 26: 18, 27: 27, 28: 33, 29: 45, 30: 10},
    23: {0: 49, 1: 23, 2: 32, 3: 46, 4: 20, 5: 40, 6: 33, 7: 40, 8: 21, 9: 46, 10: 47, 11: 23, 12: 20, 13: 43, 14: 46, 15: 48, 16: 14, 17: 48, 18: 31, 19: 49, 20: 14, 21: 36, 22: 16, 24: 15, 25: 28, 26: 23, 27: 10, 28: 22, 29: 33, 30: 18},
    24: {0: 16, 1: 15, 2: 14, 3: 10, 4: 45, 5: 22, 6: 33, 7: 46, 8: 31, 9: 36, 10: 15, 11: 46, 12: 14, 13: 29, 14: 31, 15: 12, 16: 15, 17: 48, 18: 40, 19: 42, 20: 27, 21: 40, 22: 49, 23: 15, 25: 46, 26: 47, 27: 14, 28: 10, 29: 38, 30: 31},
    25: {0: 43, 1: 10, 2: 45, 3: 14, 4: 40, 5: 33, 6: 41, 7: 16, 8: 29, 9: 39, 10: 40, 11: 49, 12: 38, 13: 32, 14: 13, 15: 13, 16: 12, 17: 10, 18: 38, 19: 23, 20: 28, 21: 10, 22: 22, 23: 28, 24: 46, 26: 48, 27: 31, 28: 45, 29: 44, 30: 14},
    26: {0: 20, 1: 22, 2: 19, 3: 49, 4: 37, 5: 44, 6: 39, 7: 44, 8: 44, 9: 48, 10: 11, 11: 23, 12: 26, 13: 37, 14: 16, 15: 23, 16: 47, 17: 29, 18: 10, 19: 45, 20: 16, 21: 10, 22: 18, 23: 23, 24: 47, 25: 29, 27: 22, 28: 25, 29: 44, 30: 41},
    27: {0: 44, 1: 22, 2: 36, 3: 39, 4: 47, 5: 47, 6: 13, 7: 18, 8: 45, 9: 29, 10: 43, 11: 11, 12: 33, 13: 37, 14: 45, 15: 46, 16: 14, 17: 39, 18: 17, 19: 33, 20: 19, 21: 10, 22: 27, 23: 10, 24: 14, 25: 31, 26: 22, 28: 10, 29: 13, 30: 33},
    28: {0: 20, 1: 21, 2: 11, 3: 31, 4: 34, 5: 41, 6: 38, 7: 34, 8: 11, 9: 42, 10: 13, 11: 44, 12: 44, 13: 30, 14: 27, 15: 48, 16: 45, 17: 46, 18: 31, 19: 29, 20: 25, 21: 30, 22: 33, 23: 22, 24: 10, 25: 45, 26: 10, 27: 13, 29: 20, 30: 30},
    29: {0: 25, 1: 22, 2: 22, 3: 13, 4: 11, 5: 18, 6: 17, 7: 45, 8: 46, 9: 50, 10: 20, 11: 36, 12: 38, 13: 10, 14: 30, 15: 34, 16: 41, 17: 38, 18: 15, 19: 22, 20: 28, 21: 49, 22: 45, 23: 33, 24: 44, 25: 20, 26: 10, 27: 13, 28: 30, 30: 15},
    30: {0: 32, 1: 23, 2: 48, 3: 15, 4: 42, 5: 15, 6: 21, 7: 14, 8: 22, 9: 31, 10: 31, 11: 36, 12: 44, 13: 33, 14: 32, 15: 34, 16: 17, 17: 49, 18: 29, 19: 16, 20: 38, 21: 10, 22: 48, 23: 18, 24: 31, 25: 41, 26: 41, 27: 33, 28: 18, 29: 16}
}
initial_solution = generate_initial_solution(customers, depot, capacity_constraint, time_window_constraint)
initial_solution = [location for route in initial_solution for location in route]


